Back: [[Customization]] Next: [[Tabs]]

It's simple to add actions to your form. Here's the code for wicket.contrib.webbeans.examples.actions.ActionBeanPage:

Embed:wicket.contrib.webbeans.examples.actions.ActionBeanPage

And here's !ActionBeanPage.beanprops:

<verbatim>
	# Actions Example
	TestBean {
		props: firstName, lastName, action.clearLastName,
			operand1, operand2, result, -number;
	}
</verbatim>

Note the methods in !ActionBeanPage.java: save, cancel, and clearLastName. These methods define the actions available from your Page (or whatever component the form is embedded in). By default, the action's label is derived from the method name. Every action method must have the following method signature:

<verbatim>
    public void actionName(AjaxRequestTarget target, Form form, <BeanClassName> bean) 
    { 
        ...
    }
</verbatim>

The target parameter normally null. The Wicket Form is always passed in "form" and the bean that the action applies to is in "bean". _!BeanClassName_ is the class name of the bean to which the action will apply. Optionally this may be "Object" if the action should apply to all beans on your page. WWB only automatically matches actions whose "bean" parameter type matches the bean in question or Object. 

This configuration yeilds the following page:
WWB:/doc/wiki/images/ActionBeanScreenshot.png

Since the save and cancel actions are not referenced anywhere else in the beanprops file, WWB assumes that they are global actions for the Page. However, the clearLastName action is referenced in the "props" parameter. It is referenced using the "action." prefix to distinguish it from a regular bean property. In this example, we placed the action near the lastName property since they are related. When you click the Clear Last Name button, the last name field will clear out.

You can also specify an "actions" parameter in the beanprops file to customize an action. Above, we said that !AjaxRequestTarget is normally null when the action is called. If you further customize the action as shown here:

<verbatim>
	# Actions Example
	TestBean {
		actions: save{ ajax: true };
		props: firstName, lastName, action.clearLastName,
			operand1, operand2, result, -number;
	}
</verbatim>

it will cause the save button to be invoked using Ajax. Hence, the !AjaxRequestTarget parameter will be non-null when the action is invoked. You can also do other action customizations, as we'll see later. You can remove actions by prefixing the action name with a dash '-'.

Back: [[Customization]]  Next: [[Tabs]]
